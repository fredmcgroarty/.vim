# To setup
# Install vim-snippets
# Place this file in ~/.vim/snippets
snippet	tint "Timex.Interal{}"
interval = Timex.Interval.new(from: ~U[`!v strftime("%Y-%m-%d %H:%M:%S")`Z], until: [hours: $1])
endsnippet

snippet	akr "alias repo"
alias Kraken.Repo
endsnippet

snippet isn "is_nil(t)"
is_nil($1) $2
endsnippet

snippet deffa "create factory"
defmacro __using__(_) do
  quote do
    def $1_factory(attrs \\ %{}) do
      map = %{}
      merge_attributes(map, attrs)
    end
  end
end
endsnippet

snippet if "insert factory"
$1 = insert(:${1})
endsnippet

snippet bf "build factory"
$1 = build(:${1})
endsnippet

snippet modoc "module doc"
@moduledoc """
$1
"""
endsnippet



snippet ifl "insert list factory"
$1 = insert_list($2, :${1})
endsnippet



snippet wip "focus on spec"
@tag :wip
endsnippet

snippet bp "binding pry for elixir"
require IEx; IEx.pry
endsnippet

snippet ~U "UDateTime YYYY-MM-DD H:M:SZ"
~U[`!v strftime("%Y-%m-%d %H:%M:%S")`Z]
endsnippet

snippet ~w "list literal"
~w($1)a
endsnippet

snippet ofield "optional fields list literal"
@optional_fields ~w($1)a
endsnippet

snippet rfield "required fields list literal"
@required_fields ~w($1)a
endsnippet

snippet I "IO.inspect()"
IO.inspect($1))
endsnippet





snippet createt "create table"
	create table(:${1:name}) do
		${2}

		timestamps()
	end
endsnippet
snippet createi "create index"
	create index(:${1:name}, [:${2:column_name}])

endsnippet
snippet col "add column"
	add :${1:name}, :${2:string}

endsnippet
snippet colr "add column with reference"
	add :${1:user}_id, references(:$1s)

endsnippet
snippet schema "ecto schema"
	defmodule ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} do
		use Ecto.Schema

		schema "${2:table_name}" do
			${3}

			timestamps()
		end
	end

endsnippet
snippet field "ecto field"
	field :${1:name}, :${2:string}

endsnippet
snippet belongs_to "ecto belongs_to assoc"
	belongs_to :${1:name}, $1

endsnippet
snippet get "setup route"
	get "/${1}", ${2:Page}Controller, :${3:index}

endsnippet
snippet controller "controller"
	defmodule ${1:Module}.${2:Page}Controller do
		use $1, :controller
	end

endsnippet
snippet action "controller action"
	def ${1:index}(conn, _params) do
		render conn, "$1.html"
	end

endsnippet
snippet gen_server "create a gen server"
	defmodule ${1:Name} do
		use GenServer

		@name __MODULE__

		def start_link do
			GenServer.start_link(__MODULE__, ${2:[]}, name: @name)
		end

		def init(state) do
			{:ok, state}
		end

		${3}
	end
endsnippet
